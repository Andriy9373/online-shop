{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", {\n    ref: \"timer\"\n  }, _toDisplayString($data.time), 513\n  /* TEXT, NEED_PATCH */\n  )]);\n}","map":{"version":3,"mappings":";;uBACIA,oBAEM,KAFN,EAEM,IAFN,EAEM,CADFC,oBAA6B,GAA7B,EAA6B;IAA1BC,GAAG,EAAC;EAAsB,CAA7B,EAAcC,iBAAIC,UAAJ,CAAd,EAAsB;EAAA;EAAtB,CACE,CAFN","names":["_createElementBlock","_createElementVNode","ref","_toDisplayString","$data"],"sourceRoot":"","sources":["/home/andrii/Hirniak_Andrii/Projects for CD/VUE-JS/online_shop/src/components/TimeClock.vue"],"sourcesContent":["<template>\n    <div>\n        <p ref=\"timer\">{{ time }}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'TimeClock',\n    data() {\n        return {\n            isMounted: false,\n            intervalPtr: {},\n            time: this.calculateTime\n        }\n    },\n    computed: {\n        calculateTime() {\n            const currentTime = new Date();\n            let hh = currentTime.getHours();\n            let mm = currentTime.getMinutes();\n            let ss = currentTime.getSeconds();\n            hh = hh < 10 ? `0${hh}` : hh;\n            mm = mm < 10 ? `0${mm}` : mm;\n            ss = ss < 10 ? `0${ss}` : ss;\n            // time.innerHTML = `${hh}:${mm}:${ss}`\n            return `${hh}:${mm}:${ss}`\n        },\n    },\n    methods: {\n        calculateTimeS() {\n\t\t\tconst currentTime = new Date();\n            this.$nextTick().then(() => {\n                this.$refs.timer.innerHTML = 'ASDASDASDASDASDASD';\n            });\n            console.log(this.$refs.timer)\n\t\t\tif (this.intervalPtr[location]) clearInterval(this.intervalPtr[location]);\n\t\t\t// this.intervalPtr[location] = setInterval(() => {\n\t\t\t// \tthis.$refs.timer.innerText = currentTime;\n\t\t\t// }, 1000);\n\t\t\treturn currentTime;\n\t\t},\n        // dynamicDate() {\n        //     setInterval(() => {\n        //         this.calculateTime();\n        //     }, 1000)\n        // }\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\np {\n    position: fixed;\n    margin: 0;\n}\n</style>"]},"metadata":{},"sourceType":"module"}